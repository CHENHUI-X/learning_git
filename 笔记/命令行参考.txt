##########################1.创建版本库

在安装好Git的前提下,进入某个文件夹.
右键Git bash here
输入
git init
即可创建成功

##########################2.连接远程仓库
*本地版本库连接远远程仓库
键入命令
git remote add 名字 地址

例如: git remote add lg https://github.com/13483332422/Learn_Git.git
即可
*克隆一个仓库
git clone https://github.com/13483332422/Numerical_solutions_of_differential_equations.git


##########################3.修改本地版本库名字
比如 我们本来想 命名为LG ,但是命名为lg
键入命令
git remote rename 旧名字 新名字

例如: git remote rename lg LG
即可

##########################4.添加文件到暂存器
键入命令
git add XX
把xx文件添加到暂存区去。



##########################5.将文件提交到本地版本库
git commit –m '注释'  
提交文件 –m 后面的是注释。

git commit 提交的时候，你会发现编辑器里你怎么输入都没反应，
这是因为vim处在不可编辑状态，按下字母键 c，
此时进入编辑状态可以开始修改注释信息了
然后 你会发现你怎么都退出不了，回到shell了，
然后操作如下： ESC  --》 退出编辑状态；
接着 连续按两次大写字母键 Z，
接着你会惊喜的发现，终于保存好退出来了！

##########################6.查看当前工作区等状态
git status
查看仓库状态

   

##########################7.查看修改历史
git diff  XX
查看XX文件修改了那些内容



##########################8.查看历史记录
git log

如果嫌输出信息太多，看得眼花缭乱的，可以试试
git log --pretty=oneline

##########################9.撤销工作区的修改
git checkout — XX  
把XX文件在工作区的修改全部撤销。

##########################10.回退到某个版本(前提是没有push到远程仓库,只进行了commit)

回到上个版本
git reset --hard HEAD^
 
同理 回退到上上个版本
git reset --hard HEAD^ ^

当然往上100个版本写100个^比较容易数不过来，所以写成
git reset --hard HEAD~100

当然 可以直接跳到某个版本:
先通过 
git log --oneline
查看之前本的版本号 
然后通过
git reset --hard 版本号 
进行回退或前进到某个具体的版本

##########################11.回退到某个版本(已经push到远程仓库)
比如里边有个文件上传错了,内容错误等
可以先把文件复制走,再执行 
rm 需要修改的文件名字
git add 需要修改的文件名字
git commit -m 'xxx'
git push xxx master

再把文件复制进来
*****************************************
鉴于此,push到远程库时一定要看仔细了再push,*
否则由于push到了远程,本地版本库中已经没有东*
西了,所以无法回到上个版本,很容易丢失文件内容*
********************************************

##########################12.撤销修改
把文件在工作区的修改全部撤销
git checkout -- readme.txt
就是让这个文件回到最近一次git commit或git add时的状态

把暂存区的修改撤销掉（unstage），重新放回工作区
git reset HEAD <file>

###########################13.提交到远程版本库
git push xx master #默认主分支

###########################14.更换仓库地址
假如你们老板换人了,更换了仓库地址,怎么办? 有三种方法


1.修改命令

git remote set-url 现有的仓库名字 url

2.先删后加

git remote rm 现有的仓库名字
git remote add 新的仓库名字(当然可以和原来一样) [url]

3.直接修改config文件
############################15.修改注释
第一种情况:只是commit了
可以用如下命令行上一次提交的注释 :
git commit --amend
然后进入编辑页面 按 i 编辑 esc退出编辑 大写Z按两次保存并退出

git使用amend选项提供了最后一次commit的反悔。
但是对于历史提交呢，就必须使用rebase了。






**************************************************************************
到这里最最最基本的命令行已经结束了(当然如果有,我会继续添加)
**************************************************************************
下面开始学习Git的分支概念,参考链接:
https://www.liaoxuefeng.com/wiki/896043488029600/896954848507552
在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。
截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。
HEAD(是一个指针)严格来说不是指向提交，而是指向master，master才是指向提交的，
所以，HEAD指向的就是当前分支。
一开始的时候，master分支是一条线，Git用master指向最新的提
再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：
当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，
再把HEAD指向dev，就表示当前分支在dev上：
(Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！)
假如我们在dev上的工作完成了，就可以把dev合并到master上。
Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并.
合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支.
****************************************************************************

##########################1.创建一个分支
git checkout -b 名字

git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

git branch 名字 #创建
git checkout 名字#切换到该分支

****************
为了和 checkout -- filename (将该文件在工作区的修改全部撤销)区别
最新版本Git将 切换分支改为(checkout也还能用,创建分支命令不变):
git switch <name>

即 
git checkout <name> 等价于 git switch <name>#切换到<name>分支
git checkout -b <name> 等价于 git switch -c <name>#创建+切换分支

****************

##########################1.查看当前分支
git branch
git branch命令会列出所有分支，当前分支前面会标一个*号。


##########################2.合并到当前分支
git merge 某个分支名
*注意,该指令是合并到当前分支,一般我们合并到主分支master上
需要先git switch master 然后再 git merge 某个分支名
	
##########################3.删除某个分支
当我们将分支合并到主分支后,其他分支不要了,可以使用
git branch -d 某个分支名

##########################4.解决冲突

我们在master分支下创建一个test.txt文件.

添加一句话:
我在master分支下,现在只有这一句话.

然后键入命令: 
git add test.txt 
git commit -m'master分支下新建了文件并输入了一句话'

然后我们新建一个分支:
git branch dev 

然后此时打开test.txt的话,显然里边只有这句话:"我在master分支下,现在只有这一句话."

然后我们在文本中 新增 一句话:我现在在dev分支下,添加了一句话.

然后键入命令: 
git add test.txt 
git commit -m'在dev分支下新增了一句话'

( 
	然后可通过 cat test.txt 查看在dev分支下文本内容,显然应该有两句话:
	我在master分支下,现在只有这一句话.(这句是master原有的)
	我现在在dev分支下,添加了一句话.(这句是dev分支下新加的)
)

然后 通过命令行转回到master分支:
git switch master 

(
	这时如果我们不在master分支下对文本内容进行任何修改
	然后通过命令行合并分支:
	git merge dev 
	(显示合并成功)
)

如果,我们这时不进行合并,而是先在master分支下打开test.txt 文件,
显然此时文本中应该只有一句话:
我在master分支下,现在只有这一句话.
(因为我们刚刚只是在dev分支下修改了文本,主分支没有动)

如果此时对文本进行修改:
比如新增一句话: 我现在在master分支下,我是新加的语句.
这时我们提交文件
git add test.txt 
git commit -m'在master分支下新增了一句话'

然后命令行合并分支
git merge dev 
(
	会报错,起冲突
	CONFLICT (content): Merge conflict in test.txt
	Automatic merge failed; fix conflicts and then commit the result.

)

这时我们需要手动纠错,比如撤销刚刚master的新增语句或者恢复到上一个提交的版本之前.

如果强制合并,这时master文件中会多出来这样的内容,以指示你冲突的地方:
<<<<<<< HEAD
我现在在master分支下,添加了一句话
=======
我现在在dev分支下,添加了一句话
>>>>>>> dev

此时 我们可以删去 master第二次做的修改(或者回退到第二次master修改之前的版本)
这样再经过add 和commit后 再次merge,即可合并成功.

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

使用如下命令:
git log --graph --pretty=oneline --abbrev-commit
可查看


















